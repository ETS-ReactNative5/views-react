{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PUBLISHABLE_KEY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tooltip","deviceList","publishableKey","process","REACT_APP_PUBLISHABLE_KEY","defaultLayer","deviceId","customLayer","assetsUrl","setState","e","target","value","_this2","Header","Layout","Footer","Content","Option","Select","react_default","a","createElement","className","layout","col","row","es_button","type","onClick","setTooltip","concat","setDeviceList","input","placeholder","onChange","setPusblishableKey","setDeviceId","setCustomLayer","setAssetsUrl","es_select","defaultValue","setDefaultLayer","map","layer","key","hypertrack_views_react","isTooltipsShown","isDeviceListShown","selectedDeviceId","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90c7176d.chunk.js","sourcesContent":["import React from \"react\";\nimport { LiveView } from \"hypertrack-views-react\";\nimport { Layout, Input, Row, Col, Button, Select } from \"antd\";\n\nimport \"./App.css\";\n\nconst PUBLISHABLE_KEY = \"<your_key_here>\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltip: false,\n      deviceList: false,\n      publishableKey:\n        process.env.REACT_APP_PUBLISHABLE_KEY || PUBLISHABLE_KEY || \"\",\n      defaultLayer: \"base\",\n      deviceId: \"\",\n      customLayer: \"\",\n      assetsUrl: \"\"\n    };\n  }\n\n  setTooltip() {\n    this.setState({\n      tooltip: !this.state.tooltip\n    });\n  }\n\n  setDeviceList() {\n    this.setState({\n      deviceList: !this.state.deviceList\n    });\n  }\n\n  setPusblishableKey(e) {\n    this.setState({\n      publishableKey: e.target.value\n    });\n  }\n\n  setDefaultLayer(defaultLayer) {\n    this.setState({\n      defaultLayer\n    });\n  }\n\n  setDeviceId(deviceId) {\n    this.setState({\n      deviceId\n    });\n  }\n\n  setCustomLayer(e) {\n    this.setState({\n      customLayer: e.target.value\n    });\n  }\n\n  setAssetsUrl(e) {\n    this.setState({\n      assetsUrl: e.target.value\n    });\n  }\n\n  render() {\n    const { Header, Footer, Content } = Layout;\n\n    const { Option } = Select;\n    const layerOptions = [\"base\", \"street\", \"satellite\", \"custom\"];\n\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header>Header</Header>\n          <Content>\n            <Col>\n              <Row>\n                <Button type=\"primary\" onClick={() => this.setTooltip()}>\n                  {`${this.state.tooltip ? \"Hide tooltips\" : \"Show tooltips\"}`}\n                </Button>\n                <Button type=\"primary\" onClick={() => this.setDeviceList()}>\n                  {`${\n                    this.state.tooltip ? \"Hide device list\" : \"Show device list\"\n                  }`}\n                </Button>\n                <Input\n                  placeholder=\"Your Publishable Key\"\n                  value={this.state.publishableKey}\n                  onChange={e => this.setPusblishableKey(e)}\n                />\n                <Input\n                  placeholder=\"Your Device ID\"\n                  value={this.state.deviceId}\n                  onChange={e => this.setDeviceId(e)}\n                />\n                <Input\n                  placeholder=\"Your Custom Layer URL\"\n                  value={this.state.customLayer}\n                  onChange={e => this.setCustomLayer(e)}\n                />\n                <Input\n                  placeholder=\"Your Assets URL\"\n                  value={this.state.assetsUrl}\n                  onChange={e => this.setAssetsUrl(e)}\n                />\n                <Select\n                  defaultValue={this.state.defaultLayer}\n                  onChange={e => this.setDefaultLayer(e)}\n                >\n                  {layerOptions.map(layer => (\n                    <Option key={layer}>{layer}</Option>\n                  ))}\n                </Select>\n              </Row>\n            </Col>\n            <LiveView\n              publishableKey={this.state.publishableKey}\n              isTooltipsShown={this.state.tooltip}\n              isDeviceListShown={this.state.deviceList}\n              selectedDeviceId={this.state.deviceId}\n              defaultLayer={this.state.defaultLayer}\n              customLayer={this.state.customLayer}\n              className=\"liveView\"\n              assetsUrl={this.state.assetsUrl}\n            />\n          </Content>\n          <Footer>Footer</Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}