{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PUBLISHABLE_KEY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tooltip","deviceList","publishableKey","process","REACT_APP_PUBLISHABLE_KEY","defaultLayer","deviceId","customLayer","assetsUrl","code","concat","_this2","setState","updateCode","_this3","e","_this4","target","value","_this5","_this6","_this7","_this8","_this9","Content","Layout","Option","Select","Title","Typography","console","log","react_default","a","createElement","className","layout","row","style","padding","col","span","offset","hypertrack_views_react","isTooltipsShown","isDeviceListShown","selectedDeviceId","es_form","Item","label","es_checkbox","onChange","setTooltip","setDeviceList","input","placeholder","setPusblishableKey","setDeviceId","setCustomLayer","setAssetsUrl","es_select","defaultValue","setDefaultLayer","map","layer","key","default_highlight","wrapLines","language","docco","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5da8af39.chunk.js","sourcesContent":["import React from \"react\";\nimport { LiveView } from \"hypertrack-views-react\";\nimport {\n  Layout,\n  Input,\n  Row,\n  Col,\n  Select,\n  Typography,\n  Form,\n  Checkbox\n} from \"antd\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport \"./App.css\";\n\nconst PUBLISHABLE_KEY = \"<your_key_here>\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltip: false,\n      deviceList: false,\n      publishableKey:\n        process.env.REACT_APP_PUBLISHABLE_KEY || PUBLISHABLE_KEY || \"\",\n      defaultLayer: \"base\",\n      deviceId: \"\",\n      customLayer: \"\",\n      assetsUrl: \"\",\n      code: `import { LiveView } from \"hypertrack-views-react\";\\n\\n<LiveView\n      publishableKey=${process.env.REACT_APP_PUBLISHABLE_KEY ||\n        PUBLISHABLE_KEY ||\n        \"\"}\n      isTooltipsShown=false\n      isDeviceListShown=false\n      selectedDeviceId=\"\"\n      defaultLayer=\"base\"\n      customLayer=\"\"\n      assetsUrl=\"\"\n    />`\n    };\n  }\n\n  setTooltip() {\n    this.setState(\n      {\n        tooltip: !this.state.tooltip\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setDeviceList() {\n    this.setState(\n      {\n        deviceList: !this.state.deviceList\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setPusblishableKey(e) {\n    this.setState(\n      {\n        publishableKey: e.target.value\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setDefaultLayer(defaultLayer) {\n    this.setState(\n      {\n        defaultLayer\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setDeviceId(e) {\n    this.setState(\n      {\n        deviceId: e.target.value\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setCustomLayer(e) {\n    this.setState(\n      {\n        customLayer: e.target.value\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  setAssetsUrl(e) {\n    this.setState(\n      {\n        assetsUrl: e.target.value\n      },\n      () => {\n        this.updateCode();\n      }\n    );\n  }\n\n  updateCode() {\n    this.setState({\n      code: `import { LiveView } from \"hypertrack-views-react\";\\n\\n<LiveView\n      publishableKey=${process.env.REACT_APP_PUBLISHABLE_KEY ||\n        PUBLISHABLE_KEY ||\n        \"\"}\n      isTooltipsShown=${this.state.tooltip}\n      isDeviceListShown=${this.state.deviceList}\n      selectedDeviceId=\"${this.state.deviceId}\"\n      defaultLayer=\"${this.state.defaultLayer}\"\n      customLayer=\"${this.state.customLayer}\"\n      assetsUrl=\"${this.state.assetsUrl}\"\n    />`\n    });\n  }\n\n  render() {\n    const { Content } = Layout;\n    const { Option } = Select;\n    const { Title } = Typography;\n\n    const layerOptions = [\"base\", \"street\", \"satellite\", \"custom\"];\n\n    console.log(this.state);\n\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Content>\n            <Row style={{ padding: \"25px\" }}>\n              <Col span={16} offset={8}>\n                <Title>HyperTrack Views ReactJS</Title>\n              </Col>\n            </Row>\n            <Row style={{ padding: \"25px\" }}>\n              <Col span={16} offset={8}>\n                <LiveView\n                  publishableKey={this.state.publishableKey}\n                  isTooltipsShown={this.state.tooltip}\n                  isDeviceListShown={this.state.deviceList}\n                  selectedDeviceId={this.state.deviceId}\n                  defaultLayer={this.state.defaultLayer}\n                  customLayer={this.state.customLayer}\n                  className=\"liveView\"\n                  assetsUrl={this.state.assetsUrl}\n                />\n              </Col>\n            </Row>\n            <Row style={{ padding: \"25px\" }}>\n              <Col span={10} offset={2}>\n                <Form layout=\"vertical\">\n                  <Form.Item label=\"View Options\">\n                    <Checkbox onChange={() => this.setTooltip()}>\n                      Show tooltips\n                    </Checkbox>\n                    <Checkbox onChange={() => this.setDeviceList()}>\n                      Show device list\n                    </Checkbox>\n                  </Form.Item>\n                  <Form.Item label=\"Publishable Key\">\n                    <Input\n                      placeholder=\"Your Publishable Key\"\n                      value={this.state.publishableKey}\n                      onChange={e => this.setPusblishableKey(e)}\n                    />\n                  </Form.Item>\n                  <Form.Item label=\"Device ID\">\n                    <Input\n                      placeholder=\"Your Device ID\"\n                      value={this.state.deviceId}\n                      onChange={e => this.setDeviceId(e)}\n                    />\n                  </Form.Item>\n                  <Form.Item label=\"Custom Layer URL\">\n                    <Input\n                      placeholder=\"Your Custom Layer URL\"\n                      value={this.state.customLayer}\n                      onChange={e => this.setCustomLayer(e)}\n                    />\n                  </Form.Item>\n                  <Form.Item label=\"Asset URL\">\n                    <Input\n                      placeholder=\"Your Assets URL\"\n                      value={this.state.assetsUrl}\n                      onChange={e => this.setAssetsUrl(e)}\n                    />\n                  </Form.Item>\n                  <Form.Item label=\"Default Layer\">\n                    <Select\n                      defaultValue={this.state.defaultLayer}\n                      onChange={e => this.setDefaultLayer(e)}\n                    >\n                      {layerOptions.map(layer => (\n                        <Option key={layer}>{layer}</Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                </Form>\n              </Col>\n              <Col span={10} offset={2}>\n                <SyntaxHighlighter\n                  wrapLines={true}\n                  language=\"javascript\"\n                  style={docco}\n                >\n                  {this.state.code}\n                </SyntaxHighlighter>\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}